{"meta":{"title":"Corny 's Blog","subtitle":null,"description":"The road ahead will be long and our climb will be steep.","author":"Corny","url":"https://blog.cony.dev","root":"/"},"pages":[{"title":"About Me","date":"2018-12-20T08:34:30.000Z","updated":"2019-08-18T07:49:15.519Z","comments":true,"path":"about/index.html","permalink":"https://blog.cony.dev/about/index.html","excerpt":"","text":"About MeBlogger Corny, now living in Shenzhen, China. Graduated from a University in Beijing and studied CS.I used to work at a TOP 2 Internet company of China, a central enterprise and a start-up company in Beijing. And now, I am the tech leader in a start-up company in Shenzhen. Why me writing this BlogActually, this Blog has existed in a long time, first built this Blog is 2014 when I was a university student.Because I busy to work (alow because lazy HAHA~), so I haven’ t writed for a long time. But now, I prepay to rebuild this Blog. From WordPress to Typecho and Ghost, these Blog System I have used, but I think these Dynamic Blog Systems is not very good. So I writed a Blog System to me powered by PHP (Codeigniter 3 with Smarty Template). BUT BUT BUT! Many Notes in files or Cloud Notes, I have to copy it and paste to the system. That is too much trouble and bullshit! So I find Hexo (A Static Blog System can be wrote in Markdown and powered by NodeJS! That ‘s AWESOME!). Also thx Github Pages, support the static pages Web service and HTTPS!!!。 All in all, the reason of why me writing the blog as follow: Many tech websites in China is SHIT! Most in these is COPY PASTE and don’ t work. Writing Blog can sum up and record experience. Many things, you can write and you think you understand is difference. You understand really only you can write. You can study again by your Blog."}],"posts":[{"title":"SQL和MongoDB语法对照表","slug":"sql-to-mongodb","date":"2016-06-27T12:47:03.000Z","updated":"2019-08-18T05:54:12.716Z","comments":true,"path":"Database/sql-to-mongodb/","link":"","permalink":"https://blog.cony.dev/Database/sql-to-mongodb/","excerpt":"原文来自https://docs.mongodb.com/manual/reference/sql-comparison/","text":"原文来自https://docs.mongodb.com/manual/reference/sql-comparison/ Create and AlterSQL 12345678CREATE TABLE users ( id MEDIUMINT NOT NULL AUTO_INCREMENT, user_id Varchar(30), age Number, status char(1), PRIMARY KEY (id)) MongoDB 12345db.users.insert( &#123; user_id: &quot;abc123&quot;, age: 55, status: &quot;A&quot; &#125; ) SQL 12ALTER TABLE usersADD join_date DATETIME MongoDB 12345db.users.update( &#123; &#125;, &#123; $set: &#123; join_date: new Date() &#125; &#125;, &#123; multi: true &#125;) SQL 12ALTER TABLE usersDROP COLUMN join_date MongoDB 12345db.users.update( &#123; &#125;, &#123; $unset: &#123; join_date: &quot;&quot; &#125; &#125;, &#123; multi: true &#125;) SQL 12CREATE INDEX idx_user_id_ascON users(user_id) MongoDB 1db.users.createIndex( &#123; user_id: 1 &#125; ) SQL 123CREATE INDEX idx_user_id_asc_age_descON users(user_id, age DESC) MongoDB 1db.users.createIndex( &#123; user_id: 1, age: -1 &#125; ) SQL 1DROP TABLE users MongoDB 1db.users.drop() InsertSQL 123456INSERT INTO users(user_id, age, status)VALUES (&quot;bcd001&quot;, 45, &quot;A&quot;) MongoDB 123db.users.insert( &#123; user_id: &quot;bcd001&quot;, age: 45, status: &quot;A&quot; &#125;) SelectSQL 12SELECT *FROM users MongoDB 1db.users.find() SQL 1234SELECT id, user_id, statusFROM users MongoDB 1234db.users.find( &#123; &#125;, &#123; user_id: 1, status: 1 &#125;) SQL 12SELECT user_id, statusFROM users MongoDB 1234db.users.find( &#123; &#125;, &#123; user_id: 1, status: 1, _id: 0 &#125;) SQL 123SELECT *FROM usersWHERE status = &quot;A&quot; MongoDB 123db.users.find( &#123; status: &quot;A&quot; &#125;) SQL 123SELECT user_id, statusFROM usersWHERE status = &quot;A&quot; MongoDB 1234db.users.find( &#123; status: &quot;A&quot; &#125;, &#123; user_id: 1, status: 1, _id: 0 &#125;) SQL 123SELECT *FROM usersWHERE status != &quot;A&quot; MongoDB 123db.users.find( &#123; status: &#123; $ne: &quot;A&quot; &#125; &#125;) SQL 1234SELECT *FROM usersWHERE status = &quot;A&quot;AND age = 50 MongoDB 1234db.users.find( &#123; status: &quot;A&quot;, age: 50 &#125;) SQL 1234SELECT *FROM usersWHERE status = &quot;A&quot;OR age = 50 MongoDB 1234db.users.find( &#123; $or: [ &#123; status: &quot;A&quot; &#125; , &#123; age: 50 &#125; ] &#125;) SQL 123SELECT *FROM usersWHERE age &gt; 25 MongoDB 123db.users.find( &#123; age: &#123; $gt: 25 &#125; &#125;) SQL 123SELECT *FROM usersWHERE age &lt; 25 MongoDB 123db.users.find( &#123; age: &#123; $lt: 25 &#125; &#125;) SQL 1234SELECT *FROM usersWHERE age &gt; 25AND age &lt;= 50 MongoDB 123db.users.find( &#123; age: &#123; $gt: 25, $lte: 50 &#125; &#125;) SQL 123SELECT *FROM usersWHERE user_id like &quot;%bc%&quot; MongoDB 1db.users.find( &#123; user_id: /bc/ &#125; ) SQL 123SELECT *FROM usersWHERE user_id like &quot;bc%&quot; MongoDB 1db.users.find( &#123; user_id: /^bc/ &#125; ) SQL 1234SELECT *FROM usersWHERE status = &quot;A&quot;ORDER BY user_id ASC MongoDB 1db.users.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: 1 &#125; ) SQL 1234SELECT *FROM usersWHERE status = &quot;A&quot;ORDER BY user_id DESC MongoDB 1db.users.find( &#123; status: &quot;A&quot; &#125; ).sort( &#123; user_id: -1 &#125; ) SQL 12SELECT COUNT(*)FROM users MongoDB 1db.users.count() 1db.users.find().count() SQL 12SELECT COUNT(user_id)FROM users MongoDB 1db.users.count( &#123; user_id: &#123; $exists: true &#125; &#125; ) 1db.users.find( &#123; user_id: &#123; $exists: true &#125; &#125; ).count() SQL 123SELECT COUNT(*)FROM usersWHERE age &gt; 30 MongoDB 1db.users.count( &#123; age: &#123; $gt: 30 &#125; &#125; ) 1db.users.find( &#123; age: &#123; $gt: 30 &#125; &#125; ).count() SQL 12SELECT DISTINCT(status)FROM users MongoDB 1db.users.distinct( &quot;status&quot; ) SQL 123SELECT *FROM usersLIMIT 1 MongoDB 1db.users.findOne() 1db.users.find().limit(1) SQL 1234SELECT *FROM usersLIMIT 5SKIP 10 MongoDB 1db.users.find().limit(5).skip(10) SQL 123EXPLAIN SELECT *FROM usersWHERE status = &quot;A&quot; MongoDB 1db.users.find( &#123; status: &quot;A&quot; &#125; ).explain() Update RecordsSQL 123UPDATE usersSET status = &quot;C&quot;WHERE age &gt; 25 MongoDB 12345db.users.update( &#123; age: &#123; $gt: 25 &#125; &#125;, &#123; $set: &#123; status: &quot;C&quot; &#125; &#125;, &#123; multi: true &#125;) SQL 123UPDATE usersSET age = age + 3WHERE status = &quot;A&quot; MongoDB 12345db.users.update( &#123; status: &quot;A&quot; &#125; , &#123; $inc: &#123; age: 3 &#125; &#125;, &#123; multi: true &#125;) Delete RecordsSQL 12DELETE FROM usersWHERE status = &quot;D&quot; MongoDB 1db.users.remove( &#123; status: &quot;D&quot; &#125; ) SQL 1DELETE FROM users MongoDB 1db.users.remove(&#123;&#125;)","categories":[{"name":"Database","slug":"Database","permalink":"https://blog.cony.dev/categories/Database/"}],"tags":[]},{"title":"git基础","slug":"git-base","date":"2016-06-25T08:18:56.000Z","updated":"2019-08-18T05:54:12.708Z","comments":true,"path":"Git/git-base/","link":"","permalink":"https://blog.cony.dev/Git/git-base/","excerpt":"首先，几个专用名词的译名如下：","text":"首先，几个专用名词的译名如下：Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 新建代码库在当前目录新建一个Git代码库 git init 新建一个目录，将其初始化为Git代码库 git init [project-name] 下载一个项目和它的整个代码历史 git clone [url] 配置Git的设置文件为 .gitconfig ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 显示当前的Git配置 git config --list 编辑Git配置文件 git config -e [--global] 设置提交代码时的用户信息 git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot; 增加/删除文件添加指定文件到暂存区 git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录 git add [dir] 添加当前目录的所有文件到暂存区 git add . 删除工作区文件，并且将这次删除放入暂存区 git rm [file1] [file2] ... 停止追踪指定文件，但该文件会保留在工作区 git rm --cached [file] 改名文件，并且将这个改名放入暂存区 git mv [file-original] [file-renamed] 代码提交提交暂存区到仓库区 git commit -m [message] 提交暂存区的指定文件到仓库区 git commit [file1] [file2] ... -m [message] 提交工作区自上次commit之后的变化，直接到仓库区 git commit -a 提交时显示所有diff信息 git commit -v 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息 git commit --amend -m [message] 重做上一次commit，并包括指定文件的新变化 git commit --amend [file1] [file2] ... 分支列出所有本地分支 git branch 列出所有远程分支 git branch -r 列出所有本地分支和远程分支 git branch -a 新建一个分支，但依然停留在当前分支 git branch [branch-name] 新建一个分支，并切换到该分支 git checkout -b [branch] 新建一个分支，指向指定commit git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系 git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区 git checkout [branch-name] 建立追踪关系，在现有分支与指定的远程分支之间 git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支 git merge [branch] 选择一个commit，合并进当前分支 git cherry-pick [commit] 删除分支 git branch -d [branch-name] 删除远程分支 git push origin --delete [branch-name] git branch -dr [remote/branch] 标签列出所有tag git tag 新建一个tag在当前commit git tag [tag] 新建一个tag在指定commit git tag [tag] [commit] 查看tag信息 git show [tag] 提交指定tag git push [remote] [tag] 提交所有tag git push [remote] --tags 新建一个分支，指向某个tag git checkout -b [branch] [tag] 查看信息显示有变更的文件 git status 显示当前分支的版本历史 git log 显示commit历史，以及每次commit发生变更的文件 git log --stat 显示某个文件的版本历史，包括文件改名 git log --follow [file] git whatchanged [file] 显示指定文件相关的每一次diff git log -p [file] 显示指定文件是什么人在什么时间修改过 git blame [file] 显示暂存区和工作区的差异 git diff 显示暂存区和上一个commit的差异 git diff --cached [file] 显示工作区与当前分支最新commit之间的差异 git diff HEAD 显示两次提交之间的差异 git diff [first-branch]...[second-branch] 显示某次提交的元数据和内容变化 git show [commit] 显示某次提交发生变化的文件 git show --name-only [commit] 显示某次提交时，某个文件的内容 git show [commit]:[filename] 显示当前分支的最近几次提交 git reflog 远程同步下载远程仓库的所有变动 git fetch [remote] 显示所有远程仓库 git remote -v 显示某个远程仓库的信息 git remote show [remote] 增加一个新的远程仓库，并命名 git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并 git pull [remote] [branch] 上传本地指定分支到远程仓库 git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突 git push [remote] --force 推送所有分支到远程仓库 git push [remote] --all 撤销恢复暂存区的指定文件到工作区 git checkout [file] 恢复某个commit的指定文件到工作区 git checkout [commit] [file] 恢复上一个commit的所有文件到工作区 git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 git reset [file] 重置暂存区与工作区，与上一次commit保持一致 git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 git reset --hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变 git reset --keep [commit] 新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支 git revert [commit] 其他生成一个可供发布的压缩包 git archive","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.cony.dev/categories/Git/"}],"tags":[]},{"title":"使用apt-get包管理在Ubuntu上安装Java","slug":"install-java-on-ubuntu-with-apt-get","date":"2016-06-23T11:46:41.000Z","updated":"2019-08-18T05:54:12.712Z","comments":true,"path":"Linux/install-java-on-ubuntu-with-apt-get/","link":"","permalink":"https://blog.cony.dev/Linux/install-java-on-ubuntu-with-apt-get/","excerpt":"原文来自DigitalOcean：https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get 针对于Ubuntu 14.04LTS","text":"原文来自DigitalOcean：https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get 针对于Ubuntu 14.04LTS 安装default JRE/JDK安装JRE：sudo apt-get install default-jre 安装JDK：sudo apt-get install default-jdk 安装OpenJDK 7安装JRE：sudo apt-get install openjdk-7-jre 安装JDK：sudo apt-get install openjdk-7-jdk 安装Oracle JDK123sudo apt-get install python-software-propertiessudo add-apt-repository ppa:webupd8team/javasudo apt-get update Oracle JDK 6: sudo apt-get install oracle-java6-installer Oracle JDK 7: sudo apt-get install oracle-java7-installer Oracle JDK 8: sudo apt-get install oracle-java8-installer 管理Java版本sudo update-alternatives --config java 会看见如下的命令显示： 123456789There are 2 choices for the alternative java (providing /usr/bin/java).Selection Path Priority Status------------------------------------------------------------* 0 /usr/lib/jvm/java-7-oracle/jre/bin/java 1062 auto mode 1 /usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java 1061 manual mode 2 /usr/lib/jvm/java-7-oracle/jre/bin/java 1062 manual modePress enter to keep the current choice[*], or type selection number: 你可以输入版本的数字去选择默认的Java版本。 针对于javac命令是一样的： sudo update-alternatives --config javac","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/categories/Linux/"}],"tags":[]},{"title":"修改macOS终端配色","slug":"colorful-terminal-in-macos","date":"2016-06-23T11:28:02.000Z","updated":"2019-08-18T05:54:12.705Z","comments":true,"path":"others/colorful-terminal-in-macos/","link":"","permalink":"https://blog.cony.dev/others/colorful-terminal-in-macos/","excerpt":"Linux的ls命令使用不同颜色区分各种文件类型，Vim编辑器也支持语法高亮，而Mac终端却总是以黑白示人。这里提供了方法如何让你让Mac终端像Linux一样色彩丰富。","text":"Linux的ls命令使用不同颜色区分各种文件类型，Vim编辑器也支持语法高亮，而Mac终端却总是以黑白示人。这里提供了方法如何让你让Mac终端像Linux一样色彩丰富。 彩色化ls的输出安装Linux使用的GNU Coreutils替换Mac的ls命令 通过Homebrew安装Coreutils： brew install coreutils 生成颜色定义文件： gdircolors --print-database &gt; ~/.dir_colors 在 ~/.bash_profile 配置文件中加入以下代码 12345if brew list | grep coreutils &gt; /dev/null ; then PATH=&quot;$(brew --prefix coreutils)/libexec/gnubin:$PATH&quot; alias ls=&apos;ls -F --show-control-chars --color=auto&apos; eval `gdircolors -b $HOME/.dir_colors`fi gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。 grep高亮显示关键字这个很简单，加上–color参数就可以了，为了使用方便，可以在 ~/.bash_profile 配置文件中加上alias定义。 123alias grep=&apos;grep --color&apos;alias egrep=&apos;egrep --color&apos;alias fgrep=&apos;fgrep --color&apos; Vim语法高亮在Vim中输入命令 :syntax on 激活语法高亮，若需要Vim启动时自动激活，在 ~/.vimrc 中添加一行 syntax on 即可。 由于macOS和PC相比缺少了 backspace 键，为了让macOS的 delete 发挥 backspace 键的作用，在 ~/.vimrc 中添加一行 set backspace=2 即可。","categories":[{"name":"others","slug":"others","permalink":"https://blog.cony.dev/categories/others/"}],"tags":[{"name":"macOS开发环境配置","slug":"macOS开发环境配置","permalink":"https://blog.cony.dev/tags/macOS开发环境配置/"}]},{"title":"学习php需要掌握的函数","slug":"php-function","date":"2016-06-23T11:17:16.000Z","updated":"2019-08-18T05:54:12.715Z","comments":true,"path":"service/php-function/","link":"","permalink":"https://blog.cony.dev/service/php-function/","excerpt":"需要学习的函数分为8类，这里列出的每个函数都只有函数名字，需要对照着php手册学习。","text":"需要学习的函数分为8类，这里列出的每个函数都只有函数名字，需要对照着php手册学习。addslasheschr,ordexplode,implodehtmlentitieshtmlspecialcharsmd5,md5_filetrim,ltrim,rtrimstr_replacestrcmpstrip_tagsstrposstrtolowerstrtouppersubstr array_change_key_casearray_chunkarray_key_existsarray_keysarray_mergearray_slicesort,arsort,krasort,ksrot,asortcountcurrentendin_array basenamedirnamefile_existsfile_put_contents,file_get_contentsfilesizeis_dirpathinfoglobfopen,fread,fclose fsockopengethostbynamelheaderip2longsetcookie base64_decode,base64_encodebase64_encodehttp_build_queryrawurldecoderawurlencode date_default_timezone_getdategetdategmdatetimemktimestrtotimemicrotime json_encodejson_decodesleep,usleepunpack,packdefine,definedexit,dieuniqid hashhash_hmachash_algos","categories":[{"name":"service","slug":"service","permalink":"https://blog.cony.dev/categories/service/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.cony.dev/tags/PHP/"}]},{"title":"ThinkPad T440p更换实体三键触摸板驱动处理","slug":"thinkpad-t440p-entity-touchpad-driver","date":"2016-06-23T02:15:35.000Z","updated":"2019-08-18T05:54:12.717Z","comments":true,"path":"Others/thinkpad-t440p-entity-touchpad-driver/","link":"","permalink":"https://blog.cony.dev/Others/thinkpad-t440p-entity-touchpad-driver/","excerpt":"ThinkPad T440p更换实体三键触摸板是使用ThinkPad T450的实体三键触摸板来替换原有一体式触摸板。因此触摸板驱动可以从Lenovo官网下载T450的驱动然后进行修改使用。","text":"ThinkPad T440p更换实体三键触摸板是使用ThinkPad T450的实体三键触摸板来替换原有一体式触摸板。因此触摸板驱动可以从Lenovo官网下载T450的驱动然后进行修改使用。修改Windows驱动方式如下： 下载T450最新款的触摸板驱动，打开后不要安装，会解压到一个文件下，然后默认在 C:\\DRIVERS\\WIN\\UltraNav\\WinWDF\\x64 路径，在这里找到SynPD.inf文件，用记事本打开，把里面的这三条删掉 123%SMB.IBMDeviceDesc% = LENOVO_GROUP36_InterTouch_Inst,ACPI\\LEN0036%SMB.IBMDeviceDesc% = LENOVO_GROUP36_InterTouch_Win8_Inst,ACPI\\LEN0036%SMB.IBMDeviceDesc% = LENOVO_GROUP36_InterTouch_Win8_Inst,ACPI\\LEN0036 然后把 123%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Inst,ACPI\\LEN200E%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Win8_Inst,ACPI\\LEN200E%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Win8_Inst,ACPI\\LEN200E 中的 LEN200E 换成 LEN0036 即 123%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Inst,ACPI\\LEN0036%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Win8_Inst,ACPI\\LEN0036%SMB.IBMDeviceDesc% = LENOVO_GROUP41_InterTouch_Win8_Inst,ACPI\\LEN0036 保存后，重启电脑进入到禁用签名模式安装此驱动，注意要把触摸板的驱动禁止系统自动更新，防止以后更新后无效了。","categories":[{"name":"Others","slug":"Others","permalink":"https://blog.cony.dev/categories/Others/"}],"tags":[]},{"title":"简单的cheerio爬虫实现","slug":"cheerio-crawler-simple","date":"2016-06-20T13:42:11.000Z","updated":"2019-08-18T05:54:12.704Z","comments":true,"path":"service/cheerio-crawler-simple/","link":"","permalink":"https://blog.cony.dev/service/cheerio-crawler-simple/","excerpt":"此程序仅仅是读取单个页面的HTML文档，抓取HTML文档中标签的内容，用法和JQuery类似。","text":"此程序仅仅是读取单个页面的HTML文档，抓取HTML文档中标签的内容，用法和JQuery类似。 1234567891011121314151617181920212223242526&quot;use strict&quot;;const fs= require(&quot;fs&quot;);const cheerio = require(&apos;cheerio&apos;);function analysis(filename) &#123; let html = fs.readFileSync(filename, &apos;utf8&apos;); let getHandleText = html.match(/&lt;!--enpproperty.*?--&gt;/g).toString(); let stringStart = getHandleText.indexOf(&apos;&lt;article&apos;); let stringEnd = getHandleText.indexOf(&apos;/enpproperty--&gt;&apos;); getHandleText = &quot;&lt;div&gt;&quot; + getHandleText.substring(stringStart, stringEnd) + &quot;&lt;/div&gt;&quot;; let $ = cheerio.load(getHandleText); return &#123; articleId: $(&apos;articleid&apos;).text(), title: $(&apos;title&apos;).text(), date: $(&apos;date&apos;).text(), author: $(&apos;author&apos;).text(), keyword: $(&apos;keyword&apos;).text(), nodeId: $(&apos;nodeid&apos;).text(), nodeName: $(&apos;nodename&apos;).text() &#125;;&#125;console.log(analysis(&apos;content_20622457.htm&apos;)); 具体请参考cheerio官方文档https://www.npmjs.com/package/cheerio","categories":[{"name":"service","slug":"service","permalink":"https://blog.cony.dev/categories/service/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://blog.cony.dev/tags/Node-js/"},{"name":"爬虫","slug":"爬虫","permalink":"https://blog.cony.dev/tags/爬虫/"}]},{"title":"Ubuntu搭建rsync服务器","slug":"ubuntu-rsync","date":"2016-06-20T05:55:57.000Z","updated":"2019-08-18T05:54:12.719Z","comments":true,"path":"Linux/ubuntu-rsync/","link":"","permalink":"https://blog.cony.dev/Linux/ubuntu-rsync/","excerpt":"Ubuntu默认已经安装了rsync，但是它的服务默认是不启动的。","text":"Ubuntu默认已经安装了rsync，但是它的服务默认是不启动的。修改 sudo vim /etc/default/rsync ： 找到 RSYNC_ENABLE=false 修改为 RSYNC_ENABLE=true 先创建配置文件： sudo cp /usr/share/doc/rsync/examples/rsyncd.conf /etc 编辑配置文件： sudo vim /etc/rsyncd.conf 去掉 log file=/var/log/rsyncd pid file=/var/run/rsyncd.pid syslog facility=daemon 前面的注释 # 修改rsync需要同步的路径： path = /var/www/pub (修改成你需要同步的路径即可) 修改rsync使其可读可写： read only = false 修改rsync用户： auth users = rsync_user secrets file = /etc/rsyncd.secrets 创建rsync用户密码文件： sudo touch /etc/rsyncd.secrets 使其内容如下(例子)：rsync_user:rsync_password 修改用户密码文件权限： sudo chmod 0600 /etc/rsyncd.secrets 启动rsync sudo /etc/init.d/rsync start 客户端测试： rsync -avz local_filename server_username@server_ip:server_filename","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/categories/Linux/"}],"tags":[]},{"title":"macOS安装php开发环境","slug":"macos-php-configure","date":"2016-06-18T08:13:59.000Z","updated":"2019-08-18T05:54:12.714Z","comments":true,"path":"macOS/macos-php-configure/","link":"","permalink":"https://blog.cony.dev/macOS/macos-php-configure/","excerpt":"安装homebrew，详见http://brew.sh","text":"安装homebrew，详见http://brew.sh使用homebrew安装php7.0： brew install homebrew/php/php70 使用homebrew安装管理php-fpm进程： mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php70/homebrew.mxcl.php70.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist brew services start homebrew/php/php70 使用homebrew安装Nginx： brew install nginx 启动Nginx： brew services start nginx 修改Nginx配置文件： vim /usr/local/etc/nginx/nginx.conf 找到 1234location / &#123; root html; index index.html index.htm; &#125; 修改为 1234location / &#123; root html; index index.html index.htm index.php; &#125; 找到 1234567#location ~ .php$ &#123;# root html;# fastcgi_pass 127.0.0.1:9000;# fastcgi_index index.php;# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;# include fastcgi_params;# &#125; 修改为 1234567location ~ .php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; 重启Nginx： brew services restart nginx","categories":[{"name":"macOS","slug":"macOS","permalink":"https://blog.cony.dev/categories/macOS/"}],"tags":[]},{"title":"git tag 标签相关操作","slug":"git-tag","date":"2016-06-13T07:28:35.000Z","updated":"2019-08-18T05:54:12.709Z","comments":true,"path":"Git/git-tag/","link":"","permalink":"https://blog.cony.dev/Git/git-tag/","excerpt":"命令行输出当前仓库的所有标签： git tag","text":"命令行输出当前仓库的所有标签： git tag搜索符合模式的标签： git tag -l &#39;v1.*&#39; 创建轻量标签： git tag v2.0 创建附注标签： git tag -a v2.0 -m &quot;version 2.0&quot; git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。创建轻量标签不需要传递参数，直接指定标签名称即可。创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。 切换到标签： git checkout [tagname] 查看标签信息： git show v2.0 删除标签： git tag -d v2.0 给指定的commit打标签： git tag -a v2.0 9fbc3d 打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。 提交指定标签： git push origin v2.0 提交全部标签： git push origin -tags 通常的git push不会将标签对象提交到git服务器，需要进行显式的操作。","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.cony.dev/categories/Git/"}],"tags":[]},{"title":"Ubuntu搭建FTP服务器","slug":"ubuntu-ftp","date":"2016-06-13T05:19:34.000Z","updated":"2019-08-18T05:54:12.718Z","comments":true,"path":"Linux/ubuntu-ftp/","link":"","permalink":"https://blog.cony.dev/Linux/ubuntu-ftp/","excerpt":"安装vsftpd： sudo apt-get install vsftpd","text":"安装vsftpd： sudo apt-get install vsftpd启动vsftpd： sudo service vsftpd start 新建/home/uftp目录作为用户主目录以及FTP目录： sudo mkdir /home/uftp 新建用户uftp并设置密码： sudo useradd -d /home/uftp -s /bin/bash uftp sudo passwd uftp 修改配置文件 /etc/vsftpd.conf： sudo vim /etc/vsftpd.conf 添加： 1234userlist_deny=NOuserlist_enable=YESuserlist_file=/etc/allowed_usersseccomp_sandbox=NO 修改： local_enable=YES write_enable=YES 新建/etc/allowed_users文件： sudo vim /etc/allowed_users 添加uftp 查看/etc/ftpusers文件中的内容： cat /etc/ftpusers 看一看有没有uftp这个用户名，如果没有，就直接退出。如果有就删除uftp,因为这个文件中记录的是不能访问FTP服务器的用户清单。 如果是用ftp上传网站，希望网站目录权限为777，那么可以将 local_umask=022 取消注释并且修改为 local_umask=000 。 重启ftp服务器： sudo service vsftpd restart","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/categories/Linux/"}],"tags":[]},{"title":"Git更新代码","slug":"git-update-code","date":"2016-06-11T02:01:55.000Z","updated":"2019-08-18T05:54:12.710Z","comments":true,"path":"Git/git-update-code/","link":"","permalink":"https://blog.cony.dev/Git/git-update-code/","excerpt":"查看git版本库状态：git status","text":"查看git版本库状态：git status获取远端分支到本地临时分支：git fetch origin master:tmp查看本地分支：git branch比较分支不同：git diff tmpRebase本地临时分支到主分支git rebase tmp删除本地临时分支git branch -d tmp","categories":[{"name":"Git","slug":"Git","permalink":"https://blog.cony.dev/categories/Git/"}],"tags":[]},{"title":"利用Github搭建Hexo博客","slug":"build-hexo","date":"2016-05-18T03:32:19.000Z","updated":"2019-08-18T05:54:12.700Z","comments":true,"path":"blog/build-hexo/","link":"","permalink":"https://blog.cony.dev/blog/build-hexo/","excerpt":"OS X搭建Node.js环境","text":"OS X搭建Node.js环境 安装OS X命令行工具，可从Xcode里安装，也可以安装Homebrew解决。 参照 https://github.com/creationix/nvm 的README.md文件搭建好nvm 使用nvm安装Node.js环境，例如nvm install v4.4 使用npm安装Hexo 安装Hexo命令行工具npm install hexo-cli -g 使用Hexo命令行工具生成项目hexo init blog 启动hexo本地服务器cd blognpm installhexo server 创建你的github.io地址 在你的github上注册以&lt;你的用户名&gt;.github.io的Repo。例如我的用户名是cornelius-kahn，那么我的Repo就是cornelius-kahn.github.io 配置git的ssh key 将Hexo发布到GitHub Pages上 安装Git部署插件npm install hexo-deployer-git --save 修改_config.yml文件deploy:type: gitrepository: git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.gitbranch: master 其他配置部署参数参考 https://hexo.io/docs/deployment.html 发表新的文章 创建新文章hexo new &quot;新文章&quot;在source/_posts/目录下找到相应的md文件编辑 本地查看效果hexo server 生成静态文件hexo generate 发布到Github上hexo deploy","categories":[{"name":"blog","slug":"blog","permalink":"https://blog.cony.dev/categories/blog/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.cony.dev/tags/Hexo/"}]},{"title":"Ubuntu下多环境多服务器并存解决方案","slug":"ubuntu-build-server","date":"2016-03-30T01:27:47.000Z","updated":"2019-08-18T05:54:12.718Z","comments":true,"path":"Linux/ubuntu-build-server/","link":"","permalink":"https://blog.cony.dev/Linux/ubuntu-build-server/","excerpt":"需求： 在同一服务器上部署php、Python、Java服务器","text":"需求： 在同一服务器上部署php、Python、Java服务器方案： 使用Tengine或者Nginx处理php Apache (mod_wsgi)处理Python(Flask) Tomcat处理Java Tengine/Nginx使用80端口 Apache使用6060端口 Tomcat使用8080端口 Apache/Tomcat非80端口访问问题均可使用Nginx代理访问解决。 测试环境： Ubuntu 14.04 LTS x64（仅使用了官方软件源） 解决过程： 编译安装Tengine： 处理编译依赖（安装gcc以及make）： sudo apt-get install gcc make 处理Tengine依赖： sudo apt-get install libpcre++-dev libssl-dev zlib1g-dev 编译： ./configure --prefix=/usr/local/tengine &amp;&amp; make &amp;&amp; make install 使用apt源安装php： sudo apt-get install php5-cli php5-fpm 使用apt源安装Nginx： sudo apt-get install nginx 配置Nginx处理php： sudo vim /etc/nginx/sites-available/default 将 12root /usr/share/nginx/html;index index.html index.htm; 修改为 12root /data/wwwroot/php;index index.html index.htm index.php; 将 1234567891011#location ~ .php$ &#123; # fastcgi_split_path_info ^(.+.php)(/.+)$; # # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini # # # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php5-fpm: # fastcgi_pass unix:/var/run/php5-fpm.sock; # fastcgi_index index.php; # include fastcgi_params; #&#125; 修改为 1234567891011location ~ .php$ &#123; fastcgi_split_path_info ^(.+.php)(/.+)$; # # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini # # # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php5-fpm: fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; include fastcgi_params; &#125; 重启Nginx sudo /etc/init.d/nginx restart 使用apt源安装Apache (mod_wsgi)： sudo apt-get install apache2 libapache2-mod-wsgi 配置Apache处理Python(Flask)： 在Flask工程根目录下（假设为/data/wwwroot/python/flaskdemo）创建flaskdemo_run.wsgi： 1234activate_this = &apos;/data/wwwroot/python/flaskdemo/venv/bin/activate_this.py&apos;execfile(activate_this, dict(__file__=activate_this))from flaskdemo_run import app as application 修改Apache端口号为6060，避免默认80端口与Nginx发生冲突： sudo vim /etc/apache2/ports.conf 将Listen 80修改为Listen 6060 配置Apache： 将VirtualHost监听端口修改为6060并且修改应用目录： sudo vim /etc/apache2/sites-available/000-default.conf 12345&lt;VirtualHost *:6060&gt; ... DocumentRoot /data/wwwroot/python ...&lt;/VirtualHost&gt; 修改应用目录权限： sudo vim /etc/apache2/apache2.conf 将 1234567...&lt;Directory /var/www/html/&gt; Options Indexes FollowSymLinks AllowOverride None Require all granted&lt;/Directory&gt;... 修改为 1234567...&lt;Directory /data/wwwroot/python&gt; Options Indexes FollowSymLinks AllowOverride None Require all granted&lt;/Directory&gt;... 配置Apache以处理Flask： sudo vim /etc/apache2/sites-available/000-default.conf 在文件开头加入Flask项目路径： WSGIPythonPath /data/wwwroot/python/flaskdemo 如果有多个Flask项目，路径用:隔开： WSGIPythonPath /data/wwwroot/python/flaskdemo:/data/wwwroot/python/flaskdemo2 在VirtualHost里DocumentRoot的下方配置Flask wsgi解析，加入： 12345678910111213&lt;VirtualHost *:6060&gt; ... DocumentRoot /data/wwwroot/python WSGIScriptAlias /flaskdemo /data/wwwroot/python/flaskdemo/flaskdemo_run.wsgi &lt;Directory /data/wwwroot/python/flaskdemo&gt; &lt;Files flaskdemo_run.wsgi&gt; Order deny,allow Allow from all &lt;/Files&gt; &lt;/Directory&gt; ...&lt;/VirtualHost&gt; 如有多个Flask项目，可以这样解析： 123456789101112131415161718192021&lt;VirtualHost *:6060&gt; ... DocumentRoot /data/wwwroot/python WSGIScriptAlias /flaskdemo /data/wwwroot/python/flaskdemo/flaskdemo_run.wsgi &lt;Directory /data/wwwroot/python/flaskdemo&gt; &lt;Files flaskdemo_run.wsgi&gt; Order deny,allow Allow from all &lt;/Files&gt; &lt;/Directory&gt; WSGIScriptAlias /flaskdemo2 /data/wwwroot/python/flaskdemo2/flaskdemo2_run.wsgi &lt;Directory /data/wwwroot/python/flaskdemo2&gt; &lt;Files flaskdemo2_run.wsgi&gt; Order deny,allow Allow from all &lt;/Files&gt; &lt;/Directory&gt; ...&lt;/VirtualHost&gt; 重启Apache sudo /etc/init.d/apache2 restart 使用apt源安装Java： sudo apt-get install openjdk-7-jre 使用apt源安装Tomcat： sudo apt-get install tomcat7 配置Tomcat： 修改webapps路径 sudo vim /etc/tomcat7/server.xml 将 12&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; 修改为 12&lt;Host name=&quot;localhost&quot; appBase=&quot;/data/wwwroot/java&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; 重启Tomcat sudo /etc/init.d/tomcat7 restart 设置Tengine/Nginx反向代理： 在/etc/nginx/sites-enabled目录下增加demo.com文件，写入： 123456789101112131415server &#123; listen 80; server_name demo.com; location / &#123; rewrite ^/(.*)$ /flaskdemo/$1 last; &#125; location ~* ^/flaskdemo/.*$ &#123; proxy_pass http://127.0.0.1:6060; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; 即可将域名代理到同一台服务器上的不同端口。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/categories/Linux/"}],"tags":[]},{"title":"JavaScript打印Object","slug":"javascript-print-object","date":"2016-03-17T07:39:51.000Z","updated":"2019-08-18T05:54:12.712Z","comments":true,"path":"Front-end/javascript-print-object/","link":"","permalink":"https://blog.cony.dev/Front-end/javascript-print-object/","excerpt":"因为alert无法打印JavaScript的Object对象，引用此方法可解决。","text":"因为alert无法打印JavaScript的Object对象，引用此方法可解决。 12345678function writeObj(obj) &#123; var description = &quot;&quot;; for(var i in obj) &#123; var property=obj[i]; description+=i+&quot; = &quot;+property+&quot;\\n&quot;; &#125; alert(description);&#125;","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://blog.cony.dev/categories/Front-end/"}],"tags":[]},{"title":"将CodeIgniter3的View层替换成Smarty3","slug":"codeigniter-with-smarty","date":"2016-03-16T08:15:36.000Z","updated":"2019-08-18T05:54:12.705Z","comments":true,"path":"service/codeigniter-with-smarty/","link":"","permalink":"https://blog.cony.dev/service/codeigniter-with-smarty/","excerpt":"CodeIgniter原生的View层比较原始，不是特别好用，因此可以将Smarty模板替换CodeIgniter的模板。","text":"CodeIgniter原生的View层比较原始，不是特别好用，因此可以将Smarty模板替换CodeIgniter的模板。将下载好的CodeIgniter3和Smarty3压缩包解压出来，将其中的 lib 文件夹拷贝至 codeigniter/application/third_party 文件夹下并重命名为 smarty 。 在 codeigniter/application/libraries 文件夹下创建 View.php ，内容如下： 12345678910111213141516&lt;?phpdefined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);require_once(APPPATH.&apos;third_party/smarty/Smarty.class.php&apos;);class View extends Smarty &#123; function __construct() &#123; parent::__construct(); $this-&gt;setTemplateDir(APPPATH.&apos;views/&apos;); $this-&gt;setCompileDir(APPPATH.&apos;views/templates_c/&apos;); $this-&gt;left_delimiter =&apos;&#123;&#123;&apos;; $this-&gt;right_delimiter=&apos;&#125;&#125;&apos;; &#125;&#125; 配置详细说明： $this-&gt;setTemplateDir(APPPATH.&#39;views/&#39;); ： 配置View层文件路径为 codeigniter/application/views/ 文件夹下。 $this-&gt;setCompileDir(APPPATH.&#39;views/templates_c/&#39;); ： 配置Smarty编译后的文件路径为 codeigniter/application/views/templates_c/ 文件夹下。 $this-&gt;left_delimiter =&#39;;` 和 `$this->right_delimiter=&#39;; : 将Smarty变量识别符替换掉初始的 { 和 } 是为了防止和css样式冲突。 编辑 codeigniter/application/config/autoload.php ，添加： 1$autoload[&apos;libraries&apos;] = array(&apos;view&apos;); 至此，已经成功将CI和Smarty组装在一起了。 说明： 在CI控制器中，使用Smarty模板的方式举例如下： 12$this-&gt;view-&gt;assign(&apos;info&apos;, &quot;Welcome to CodeIgniter with Smarty!&quot;);$this-&gt;view-&gt;display(&apos;welcome_message.tpl&apos;); 在View层中，使用Smarty变量的方式为： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&#123;&#123;$info&#125;&#125;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;&#123;$info&#125;&#125;&lt;/body&gt;&lt;/html&gt; 提供一个组装好的版本下载https://github.com/cornelius-kahn/codeIgniter-smarty","categories":[{"name":"service","slug":"service","permalink":"https://blog.cony.dev/categories/service/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.cony.dev/tags/PHP/"},{"name":"Web框架","slug":"Web框架","permalink":"https://blog.cony.dev/tags/Web框架/"}]},{"title":"CentOS 7搭建各类服务器安装配置","slug":"centos7-build-server","date":"2015-11-23T12:09:57.000Z","updated":"2019-08-18T05:54:12.703Z","comments":true,"path":"linux/centos7-build-server/","link":"","permalink":"https://blog.cony.dev/linux/centos7-build-server/","excerpt":"添加EPEL源，修改镜像源。","text":"添加EPEL源，修改镜像源。安装Java环境：yum install java-1.8.0-openjdk 安装php环境：yum install php 安装Tomcat服务器：yum install tomcat 启动Tomcat服务器：：systemctl start tomcat.service Tomcat默认的应用目录为：/usr/share/tomcat/webapps/ROOT/ 开机启动Tomcat：systemctl enable tomcat.service 安装Nginx服务器：yum install nginx 启动Nginx服务器：systemctl start nginx.service Nginx默认的应用目录为：/usr/share/nginx/html/ 开机启动Nginx：systemctl enable nginx.service 安装php-fpm：yum install php-fpm 启动php-fpm：systemctl start php-fpm.service 开机启动php-fpm：systemctl enable php-fpm.service 修改Nginx和php配置文件以让Nginx支持php： cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf vim /etc/nginx/nginx.conf 找到 1234location / &#123; root html; index index.html index.htm; &#125; 修改为 1234location / &#123; root html; index index.html index.htm index.php; &#125; 找到 1234567#location ~ .php$ &#123;# root html;# fastcgi_pass 127.0.0.1:9000;# fastcgi_index index.php;# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;# include fastcgi_params;# &#125; 修改为 1234567location ~ .php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; vim /etc/php.ini 找到 ; cgi.fix_pathinfo=1 修改为 cgi.fix_pathinfo=1 重启Nginx和php-fpm systemctl restart nginx.service systemctl restart php-fpm.service 安装MariaDB（CentOS从CentOS7开始用MariaDB取代MySQL）：yum install mariadb-server 启动MariaDB数据库：systemctl start mariadb.service 开机启动MariaDB：systemctl enable mariadb.service MariaDB配置项： 1) 修改默认空密码： update mysql.user set password = PASSWORD(‘yourpassword’) where user=’root’; flush privileges; 2) 修改访问端口： 任意IP访问： update mysql.user set host=’%’ where host=’localhost’; 指定IP访问： update mysql.user set host=’yourIP’ where host=’localhost’; 上述配置重启MySQL即可生效：systemctl restart mariadb.service CentOS防火墙设置： 开启防火墙：systemctl start firewalld.service 开机启动防火墙：systemctl enable firewalld.service 开放80、8080端口并使防火墙生效 firewall-cmd –add-port=80/tcp –permanent firewall-cmd –add-port=8080/tcp –permanent systemctl restart firewalld.service","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.cony.dev/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/tags/Linux/"}]},{"title":"CentOS 6搭建各类服务器安装配置","slug":"centos6-build-server","date":"2015-11-22T12:09:57.000Z","updated":"2019-08-18T05:54:12.702Z","comments":true,"path":"linux/centos6-build-server/","link":"","permalink":"https://blog.cony.dev/linux/centos6-build-server/","excerpt":"添加EPEL源，修改镜像源。","text":"添加EPEL源，修改镜像源。安装Java环境：yum install java-1.8.0-openjdk 安装php环境：yum install php 安装Tomcat服务器：yum install tomcat 启动Tomcat服务器：：/etc/init.d/tomcat start Tomcat默认的应用目录为：/usr/share/tomcat/webapps/ROOT/ 开机启动Tomcat：chkconfig tomcat on 安装Nginx服务器：yum install nginx 启动Nginx服务器：/etc/init.d/nginx start Nginx默认的应用目录为：/usr/share/nginx/html/ 开机启动Nginx：chkconfig nginx on 安装php-fpm：yum install php-fpm 启动php-fpm：/etc/init.d/php-fpm start 开机启动php-fpm：chkconfig php-fpm on 修改Nginx和php配置文件以让Nginx支持php： cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf vim /etc/nginx/nginx.conf 找到 1234location / &#123; root html; index index.html index.htm; &#125; 修改为 1234location / &#123; root html; index index.html index.htm index.php; &#125; 找到 1234567#location ~ .php$ &#123;# root html;# fastcgi_pass 127.0.0.1:9000;# fastcgi_index index.php;# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;# include fastcgi_params;# &#125; 修改为 1234567location ~ .php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; vim /etc/php.ini 找到 ; cgi.fix_pathinfo=1 修改为 cgi.fix_pathinfo=1 重启Nginx和php-fpm /etc/init.d/nginx restart /etc/init.d/php-fpm restart 安装MySQL：yum install mysql-server 启动MySQL数据库：/etc/init.d/mysqld start 开机启动MySQL：chkconfig mysqld on MySQL配置项： 1) 修改默认空密码： update mysql.user set password = PASSWORD(‘yourpassword’) where user=’root’; flush privileges; 2) 修改访问端口： 任意IP访问： update mysql.user set host=’%’ where host=’localhost’; 指定IP访问： update mysql.user set host=’yourIP’ where host=’localhost’; 上述配置重启MySQL即可生效：/etc/init.d/mysqld restart CentOS防火墙设置： 开启防火墙：/etc/init.d/iptables start 开机启动防火墙：chkconfig iptables on 开放80、8080端口并使防火墙生效 /sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT /sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT /etc/rc.d/init.d/iptables save /etc/init.d/iptables restart","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.cony.dev/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/tags/Linux/"}]},{"title":"LNMP服务器的搭建","slug":"build-lnmp","date":"2015-11-19T12:00:04.000Z","updated":"2019-08-18T05:54:12.701Z","comments":true,"path":"linux/build-lnmp/","link":"","permalink":"https://blog.cony.dev/linux/build-lnmp/","excerpt":"本文中，L -&gt; Ubuntu 14.04 ; N -&gt; Nginx ; M -&gt; MySQL5.5 ; P -&gt; PHP5.5 ;","text":"本文中，L -&gt; Ubuntu 14.04 ; N -&gt; Nginx ; M -&gt; MySQL5.5 ; P -&gt; PHP5.5 ;安装Nginx、MySQL、PHP： sudo apt-get install nginx mysql-server mysql-client php5 php5-fpm php5-mysql Nginx环境配置： 编辑Nginx配置文件： sudo vim /etc/nginx/sites-available/default 找到 12root /usr/share/nginx/html;index index.html index.htm; 修改为 12root /usr/share/nginx/html;index index.html index.htm index.php; 找到 1234567891011#location ~ .php$ &#123; # fastcgi_split_path_info ^(.+.php)(/.+)$; # # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini # # # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php5-fpm: # fastcgi_pass unix:/var/run/php5-fpm.sock; # fastcgi_index index.php; # include fastcgi_params; #&#125; 修改为 1234567891011location ~ .php$ &#123; fastcgi_split_path_info ^(.+.php)(/.+)$; # # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini # # # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php5-fpm: fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; include fastcgi_params; &#125; 测试配置文件是否正确： sudo nginx -t 重启Nginx服务器： sudo service nginx restart 默认的部署路径为： /usr/share/nginx/html/","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.cony.dev/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/tags/Linux/"}]},{"title":"css框模型","slug":"css-boxmodel","date":"2015-08-16T07:03:33.000Z","updated":"2019-08-18T05:54:12.706Z","comments":true,"path":"frontend/css-boxmodel/","link":"","permalink":"https://blog.cony.dev/frontend/css-boxmodel/","excerpt":"模型概述：","text":"模型概述： 元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。 内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。可以通过将元素的 margin 和 padding 设置为零来覆盖这些浏览器样式。 在css中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。 123456box &#123; width: 70px; height: 50px; margin: 10px; padding: 5px;&#125; 说明： 内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。 外边距可以是负值，而且在很多情况下都要使用负值的外边距。 内边距（padding） h1 元素的各边都有 10 像素的内边距： 123h1 &#123; padding: 10px;&#125; 123h1 &#123; padding: 10px 9px 8px 7px;&#125; 123456h1 &#123; padding-top: 10px; padding-right: 9px; padding-bottom: 8px; padding-left: 7px;&#125; 外边距（margin） margin和padding类似，只需要将2中的padding替换成margin即可。 外边距合并 外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。","categories":[{"name":"frontend","slug":"frontend","permalink":"https://blog.cony.dev/categories/frontend/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://blog.cony.dev/tags/前端/"}]},{"title":"css3基础","slug":"css3-base","date":"2015-08-16T07:02:17.000Z","updated":"2019-08-18T05:54:12.707Z","comments":true,"path":"frontend/css3-base/","link":"","permalink":"https://blog.cony.dev/frontend/css3-base/","excerpt":"在html中引入css样式：","text":"在html中引入css样式： 1）通过外部css文件引入 在 &lt;head&gt; 标签里引入外部的css样式文件，例如： 1&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; 2）在 &lt;head&gt; 标签里写入css样式 将css写在标签里，例如： 123456&lt;style&gt; .text &#123; font-size: 14px; padding: 20px 40px; &#125;&lt;/style&gt; 或者 123&lt;style&gt; .text &#123;font-size: 14px; padding: 20px 40px;&#125;&lt;/style&gt; 说明： 上面的第一种写法适合开发过程中使用，容易阅读；第二种写法适合开发完成发布使用；需注意的是某些Web框架（比如php Smarty）中 { 和 } 是保留的关键符，就不能再使用第二种写法（或者修改Smarty的关键符）。 在html中需要将某个标签属性定义一个 class=&quot;className&quot; ，对于它的样式就是： 123456&lt;style&gt; .className &#123; XXXXXXXXX: XXXXXXXXX; XXXXXXXXX: XXXXXXXXX; &#125;&lt;/style&gt; 如果你要对某个标签（例如 &lt;p&gt;&lt;/p&gt; ）写相同的样式，可以这么写： 123456&lt;style&gt; p &#123; XXXXXXXXX: XXXXXXXXX; XXXXXXXXX: XXXXXXXXX; &#125;&lt;/style&gt; 3）html内嵌样式（element.style） 将css样式直接写入html的标签内，最简单粗暴，但是不易维护，一般不推荐使用，但是一些特殊情况很好用，例如： 1&lt;p style=&quot;font-size: 14px; padding: 20px 40px;&quot;&gt;&lt;/p&gt; 4）3种css样式引入的优先级说明：3）&gt; 2）&gt; 1），就是你对某个html类写了多个样式，浏览器会直接执行优先级高的样式。 css中常用的样式：1）背景 背景颜色： 1background-color: colorName; 或者 1background-color: #colorRGB; 背景图片： 1background-image: url(backgroundImage.jpg); 2）文本 文本缩进： 1text-indent: 5px; 水平对齐： 居中对齐 1text-align: center; 左对齐 1text-align: left; 右对齐 1text-align: right; 字、单词间隔： 1word-spacing: 30px; 字母间隔： 1letter-spacing: 20px; 文本修饰： 取消所有样式： 1text-decoration: none; 下划线： 1text-decoration: underline; 上划线： 1text-decoration: overline; 删除线： 1text-decoration: line-through; 文本闪烁： 1text-decoration: blink; 字体颜色： 1color: colorName; 或者 1color: #colorRGB; 行高： 1line-height: 90%; 3）字体 指定字体： 1font-family: Georgia; 字体风格： 文本正常显示： 1font-style: normal; 文本斜体显示： 1font-style: italic; 文本倾斜显示： 1font-style: oblique; 说明：斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜（oblique）文本则是正常竖直文本的一个倾斜版本。 字体加粗： 123font-weight: normal;font-weight: bold;font-weight: 900; 说明：使用 bold 关键字可以将文本设置为粗体。关键字 100 ~ 900 为字体指定了 9 级加粗度。如果一个字体内置了这些加粗级别，那么这些数字就直接映射到预定义的级别，100 对应最细的字体变形，900 对应最粗的字体变形。数字 400 等价于 normal，而 700 等价于 bold。 字体大小： 1font-size: 60px;","categories":[{"name":"frontend","slug":"frontend","permalink":"https://blog.cony.dev/categories/frontend/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://blog.cony.dev/tags/前端/"}]},{"title":"html5页面的基本结构","slug":"html5-base-structure","date":"2015-08-16T07:00:33.000Z","updated":"2019-08-18T05:54:12.711Z","comments":true,"path":"Front-end/html5-base-structure/","link":"","permalink":"https://blog.cony.dev/Front-end/html5-base-structure/","excerpt":"html5页面的基本结构：","text":"html5页面的基本结构：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 说明： 1&lt;!DOCTYPE html&gt; html5标准网页声明，表示页面采用html5标准。 1&lt;html lang=&quot;zh-CN&quot;&gt; 指定网页语言种类，zh-CN为中文，en为英文。 1234&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt; &lt;head&gt; 标签用于定义文档的头部，它是所有头部元素的容器。 &lt;head&gt; 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。 文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。 绝大多数文档头部包含的数据都不会真正作为内容显示给读者。 下面这些标签可用在 head 部分：&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, 以及 &lt;title&gt;。 &lt;title&gt; 定义文档的标题，它是 head 部分中唯一必需的元素。例如： &lt;title&gt;我是萌萌哒的标题&lt;/title&gt; &lt;meta&gt; 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 &lt;meta charset=”UTF-8″&gt; 这里指定的是html5的编码集。 1&lt;body&gt; &lt;body&gt; 元素定义文档的主体。 &lt;body&gt; 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。） 12&lt;/body&gt;&lt;/html&gt; 注意：&lt;html&gt;、&lt;head&gt;、&lt;title&gt;、&lt;body&gt;均有对应的&lt;/html&gt;、&lt;/head&gt;、&lt;/title&gt;、&lt;/body&gt;。它们是成对出现在html页面文档里的。","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://blog.cony.dev/categories/Front-end/"}],"tags":[]},{"title":"Linux下Java环境的配置","slug":"linux-java-configure","date":"2015-05-07T09:08:49.000Z","updated":"2019-08-18T05:54:12.713Z","comments":true,"path":"Linux/linux-java-configure/","link":"","permalink":"https://blog.cony.dev/Linux/linux-java-configure/","excerpt":"基于RPM软件包的发行版（如RadHat、CentOS、OpenSUSE等）直接打开.rpm软件包即可","text":"基于RPM软件包的发行版（如RadHat、CentOS、OpenSUSE等）直接打开.rpm软件包即可 基于dbkg软件包的发行版（如Debian、Ubuntu、Linux Mint等）Oracle官方没有提供.deb软件包，只能使用.tar.gz软件包 范例中使用的Java安装包是jdk-8u45-linux-x64.tar.gz 进入存放Java安装包的文件夹，解压至相应目录sudo tar zxvf jdk-8u45-linux-x64.tar.gz -C /usr/local/java 配置系统变量，打开环境变量配置文件sudo gedit /etc/profile 在gedit编辑器中的最后添加如下信息并保存 1234# set java environmentexport JAVA_HOME=/usr/local/java/jdk1.8.0_45export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jarexport PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/jre/bin:$PATH 更新源sudo update-alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_45/bin/java 300sudo update-alternatives --install /usr/bin/javac javac /usr/local/java/jdk1.8.0_45/bin/javac 300sudo update-alternatives --config java","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.cony.dev/categories/Linux/"}],"tags":[]},{"title":"Windows下Java环境的配置","slug":"windows-java-configure","date":"2015-04-03T09:08:49.000Z","updated":"2019-08-18T05:54:12.720Z","comments":true,"path":"Windows/windows-java-configure/","link":"","permalink":"https://blog.cony.dev/Windows/windows-java-configure/","excerpt":"JDK环境变量设置：","text":"JDK环境变量设置： 新建CLASSPATH：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 新建JAVA_HOME：C:\\Program Files\\Java\\jdk1.7.0_45（JDK安装路径） 编辑Path：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;（在原有的参数下的最后添加这一句代码，与前面的用;隔开）","categories":[{"name":"Windows","slug":"Windows","permalink":"https://blog.cony.dev/categories/Windows/"}],"tags":[]}]}